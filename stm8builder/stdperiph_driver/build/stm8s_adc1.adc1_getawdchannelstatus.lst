                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Tue Dec 12 21:28:12 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8s_adc1_adc1_getawdchannelstatus
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _assert_failed
                                     13 	.globl _ADC1_GetAWDChannelStatus
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_adc1.adc1_getawdchannelstatus.c: 53: FlagStatus ADC1_GetAWDChannelStatus(ADC1_Channel_TypeDef Channel)
                                     43 ;	-----------------------------------------
                                     44 ;	 function ADC1_GetAWDChannelStatus
                                     45 ;	-----------------------------------------
      000000                         46 _ADC1_GetAWDChannelStatus:
      000000 89               [ 2]   47 	pushw	x
                                     48 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_adc1.adc1_getawdchannelstatus.c: 58: assert_param(IS_ADC1_CHANNEL_OK(Channel));
      000001 0D 05            [ 1]   49 	tnz	(0x05, sp)
      000003 27 4D            [ 1]   50 	jreq	00107$
      000005 7B 05            [ 1]   51 	ld	a, (0x05, sp)
      000007 A1 01            [ 1]   52 	cp	a, #0x01
      000009 27 47            [ 1]   53 	jreq	00107$
      00000B 7B 05            [ 1]   54 	ld	a, (0x05, sp)
      00000D A1 02            [ 1]   55 	cp	a, #0x02
      00000F 27 41            [ 1]   56 	jreq	00107$
      000011 7B 05            [ 1]   57 	ld	a, (0x05, sp)
      000013 A1 03            [ 1]   58 	cp	a, #0x03
      000015 27 3B            [ 1]   59 	jreq	00107$
      000017 7B 05            [ 1]   60 	ld	a, (0x05, sp)
      000019 A1 04            [ 1]   61 	cp	a, #0x04
      00001B 27 35            [ 1]   62 	jreq	00107$
      00001D 7B 05            [ 1]   63 	ld	a, (0x05, sp)
      00001F A1 05            [ 1]   64 	cp	a, #0x05
      000021 27 2F            [ 1]   65 	jreq	00107$
      000023 7B 05            [ 1]   66 	ld	a, (0x05, sp)
      000025 A1 06            [ 1]   67 	cp	a, #0x06
      000027 27 29            [ 1]   68 	jreq	00107$
      000029 7B 05            [ 1]   69 	ld	a, (0x05, sp)
      00002B A1 07            [ 1]   70 	cp	a, #0x07
      00002D 27 23            [ 1]   71 	jreq	00107$
      00002F 7B 05            [ 1]   72 	ld	a, (0x05, sp)
      000031 A1 08            [ 1]   73 	cp	a, #0x08
      000033 27 1D            [ 1]   74 	jreq	00107$
      000035 7B 05            [ 1]   75 	ld	a, (0x05, sp)
      000037 A1 0C            [ 1]   76 	cp	a, #0x0c
      000039 27 17            [ 1]   77 	jreq	00107$
      00003B 7B 05            [ 1]   78 	ld	a, (0x05, sp)
      00003D A1 09            [ 1]   79 	cp	a, #0x09
      00003F 27 11            [ 1]   80 	jreq	00107$
      000041 90 AEr00r8B      [ 2]   81 	ldw	y, #___str_0+0
      000045 4B 3A            [ 1]   82 	push	#0x3a
      000047 5F               [ 1]   83 	clrw	x
      000048 89               [ 2]   84 	pushw	x
      000049 4B 00            [ 1]   85 	push	#0x00
      00004B 90 89            [ 2]   86 	pushw	y
      00004D CDr00r00         [ 4]   87 	call	_assert_failed
      000050 5B 06            [ 2]   88 	addw	sp, #6
      000052                         89 00107$:
                                     90 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_adc1.adc1_getawdchannelstatus.c: 60: if (Channel < (uint8_t)8)
      000052 7B 05            [ 1]   91 	ld	a, (0x05, sp)
      000054 A1 08            [ 1]   92 	cp	a, #0x08
      000056 24 17            [ 1]   93 	jrnc	00102$
                                     94 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_adc1.adc1_getawdchannelstatus.c: 62: status = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << Channel));
      000058 AE 54 0D         [ 2]   95 	ldw	x, #0x540d
      00005B F6               [ 1]   96 	ld	a, (x)
      00005C 6B 02            [ 1]   97 	ld	(0x02, sp), a
      00005E A6 01            [ 1]   98 	ld	a, #0x01
      000060 88               [ 1]   99 	push	a
      000061 7B 06            [ 1]  100 	ld	a, (0x06, sp)
      000063 27 05            [ 1]  101 	jreq	00219$
      000065                        102 00218$:
      000065 08 01            [ 1]  103 	sll	(1, sp)
      000067 4A               [ 1]  104 	dec	a
      000068 26 FB            [ 1]  105 	jrne	00218$
      00006A                        106 00219$:
      00006A 84               [ 1]  107 	pop	a
      00006B 14 02            [ 1]  108 	and	a, (0x02, sp)
      00006D 20 1A            [ 2]  109 	jra	00103$
      00006F                        110 00102$:
                                    111 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_adc1.adc1_getawdchannelstatus.c: 66: status = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8)));
      00006F AE 54 0C         [ 2]  112 	ldw	x, #0x540c
      000072 F6               [ 1]  113 	ld	a, (x)
      000073 6B 01            [ 1]  114 	ld	(0x01, sp), a
      000075 7B 05            [ 1]  115 	ld	a, (0x05, sp)
      000077 A0 08            [ 1]  116 	sub	a, #0x08
      000079 95               [ 1]  117 	ld	xh, a
      00007A A6 01            [ 1]  118 	ld	a, #0x01
      00007C 88               [ 1]  119 	push	a
      00007D 9E               [ 1]  120 	ld	a, xh
      00007E 4D               [ 1]  121 	tnz	a
      00007F 27 05            [ 1]  122 	jreq	00221$
      000081                        123 00220$:
      000081 08 01            [ 1]  124 	sll	(1, sp)
      000083 4A               [ 1]  125 	dec	a
      000084 26 FB            [ 1]  126 	jrne	00220$
      000086                        127 00221$:
      000086 84               [ 1]  128 	pop	a
      000087 14 01            [ 1]  129 	and	a, (0x01, sp)
      000089                        130 00103$:
                                    131 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_adc1.adc1_getawdchannelstatus.c: 69: return ((FlagStatus)status);
      000089 85               [ 2]  132 	popw	x
      00008A 81               [ 4]  133 	ret
                                    134 	.area CODE
      00008B                        135 ___str_0:
      00008B 2F 68 6F 6D 65 2F 67   136 	.ascii "/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driv"
             72 79 74 6F 6C 65 2F
             64 65 76 2F 67 69 74
             2F 73 74 6D 38 62 75
             69 6C 64 65 72 2F 73
             74 6D 38 62 75 69 6C
             64 65 72 2F 73 74 64
             70 65 72 69 70 68 5F
             64 72 69 76
      0000C7 65 72 2F 73 72 63 2F   137 	.ascii "er/src/stm8s_adc1.adc1_getawdchannelstatus.c"
             73 74 6D 38 73 5F 61
             64 63 31 2E 61 64 63
             31 5F 67 65 74 61 77
             64 63 68 61 6E 6E 65
             6C 73 74 61 74 75 73
             2E 63
      0000F3 00                     138 	.db 0x00
                                    139 	.area INITIALIZER
                                    140 	.area CABS (ABS)
