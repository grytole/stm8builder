                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Tue Dec 12 21:28:17 2017
                                      5 ;--------------------------------------------------------
                                      6 	.module stm8s_uart1_uart1_getflagstatus
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _assert_failed
                                     13 	.globl _UART1_GetFlagStatus
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 54: FlagStatus UART1_GetFlagStatus(UART1_Flag_TypeDef UART1_FLAG)
                                     43 ;	-----------------------------------------
                                     44 ;	 function UART1_GetFlagStatus
                                     45 ;	-----------------------------------------
      000000                         46 _UART1_GetFlagStatus:
      000000 89               [ 2]   47 	pushw	x
                                     48 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 59: assert_param(IS_UART1_FLAG_OK(UART1_FLAG));
      000001 1E 05            [ 2]   49 	ldw	x, (0x05, sp)
      000003 A3 01 01         [ 2]   50 	cpw	x, #0x0101
      000006 26 06            [ 1]   51 	jrne	00208$
      000008 A6 01            [ 1]   52 	ld	a, #0x01
      00000A 6B 02            [ 1]   53 	ld	(0x02, sp), a
      00000C 20 02            [ 2]   54 	jra	00209$
      00000E                         55 00208$:
      00000E 0F 02            [ 1]   56 	clr	(0x02, sp)
      000010                         57 00209$:
      000010 1E 05            [ 2]   58 	ldw	x, (0x05, sp)
      000012 A3 02 10         [ 2]   59 	cpw	x, #0x0210
      000015 26 03            [ 1]   60 	jrne	00211$
      000017 A6 01            [ 1]   61 	ld	a, #0x01
      000019 21                      62 	.byte 0x21
      00001A                         63 00211$:
      00001A 4F               [ 1]   64 	clr	a
      00001B                         65 00212$:
      00001B 1E 05            [ 2]   66 	ldw	x, (0x05, sp)
      00001D A3 00 80         [ 2]   67 	cpw	x, #0x0080
      000020 27 4B            [ 1]   68 	jreq	00119$
      000022 1E 05            [ 2]   69 	ldw	x, (0x05, sp)
      000024 A3 00 40         [ 2]   70 	cpw	x, #0x0040
      000027 27 44            [ 1]   71 	jreq	00119$
      000029 1E 05            [ 2]   72 	ldw	x, (0x05, sp)
      00002B A3 00 20         [ 2]   73 	cpw	x, #0x0020
      00002E 27 3D            [ 1]   74 	jreq	00119$
      000030 1E 05            [ 2]   75 	ldw	x, (0x05, sp)
      000032 A3 00 10         [ 2]   76 	cpw	x, #0x0010
      000035 27 36            [ 1]   77 	jreq	00119$
      000037 1E 05            [ 2]   78 	ldw	x, (0x05, sp)
      000039 A3 00 08         [ 2]   79 	cpw	x, #0x0008
      00003C 27 2F            [ 1]   80 	jreq	00119$
      00003E 1E 05            [ 2]   81 	ldw	x, (0x05, sp)
      000040 A3 00 04         [ 2]   82 	cpw	x, #0x0004
      000043 27 28            [ 1]   83 	jreq	00119$
      000045 1E 05            [ 2]   84 	ldw	x, (0x05, sp)
      000047 A3 00 02         [ 2]   85 	cpw	x, #0x0002
      00004A 27 21            [ 1]   86 	jreq	00119$
      00004C 1E 05            [ 2]   87 	ldw	x, (0x05, sp)
      00004E A3 00 01         [ 2]   88 	cpw	x, #0x0001
      000051 27 1A            [ 1]   89 	jreq	00119$
      000053 0D 02            [ 1]   90 	tnz	(0x02, sp)
      000055 26 16            [ 1]   91 	jrne	00119$
      000057 4D               [ 1]   92 	tnz	a
      000058 26 13            [ 1]   93 	jrne	00119$
      00005A 90 AEr00rA9      [ 2]   94 	ldw	y, #___str_0+0
      00005E 88               [ 1]   95 	push	a
      00005F 4B 3B            [ 1]   96 	push	#0x3b
      000061 5F               [ 1]   97 	clrw	x
      000062 89               [ 2]   98 	pushw	x
      000063 4B 00            [ 1]   99 	push	#0x00
      000065 90 89            [ 2]  100 	pushw	y
      000067 CDr00r00         [ 4]  101 	call	_assert_failed
      00006A 5B 06            [ 2]  102 	addw	sp, #6
      00006C 84               [ 1]  103 	pop	a
      00006D                        104 00119$:
                                    105 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 65: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00006D 88               [ 1]  106 	push	a
      00006E 7B 07            [ 1]  107 	ld	a, (0x07, sp)
      000070 6B 02            [ 1]  108 	ld	(0x02, sp), a
      000072 84               [ 1]  109 	pop	a
                                    110 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 63: if (UART1_FLAG == UART1_FLAG_LBDF)
      000073 4D               [ 1]  111 	tnz	a
      000074 27 10            [ 1]  112 	jreq	00114$
                                    113 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 65: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000076 AE 52 37         [ 2]  114 	ldw	x, #0x5237
      000079 F6               [ 1]  115 	ld	a, (x)
      00007A 14 01            [ 1]  116 	and	a, (0x01, sp)
      00007C 4D               [ 1]  117 	tnz	a
      00007D 27 04            [ 1]  118 	jreq	00102$
                                    119 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 68: status = SET;
      00007F A6 01            [ 1]  120 	ld	a, #0x01
      000081 20 24            [ 2]  121 	jra	00115$
      000083                        122 00102$:
                                    123 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 73: status = RESET;
      000083 4F               [ 1]  124 	clr	a
      000084 20 21            [ 2]  125 	jra	00115$
      000086                        126 00114$:
                                    127 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 76: else if (UART1_FLAG == UART1_FLAG_SBK)
      000086 0D 02            [ 1]  128 	tnz	(0x02, sp)
      000088 27 10            [ 1]  129 	jreq	00111$
                                    130 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 78: if ((UART1->CR2 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00008A AE 52 35         [ 2]  131 	ldw	x, #0x5235
      00008D F6               [ 1]  132 	ld	a, (x)
      00008E 14 01            [ 1]  133 	and	a, (0x01, sp)
      000090 4D               [ 1]  134 	tnz	a
      000091 27 04            [ 1]  135 	jreq	00105$
                                    136 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 81: status = SET;
      000093 A6 01            [ 1]  137 	ld	a, #0x01
      000095 20 10            [ 2]  138 	jra	00115$
      000097                        139 00105$:
                                    140 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 86: status = RESET;
      000097 4F               [ 1]  141 	clr	a
      000098 20 0D            [ 2]  142 	jra	00115$
      00009A                        143 00111$:
                                    144 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 91: if ((UART1->SR & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00009A AE 52 30         [ 2]  145 	ldw	x, #0x5230
      00009D F6               [ 1]  146 	ld	a, (x)
      00009E 14 01            [ 1]  147 	and	a, (0x01, sp)
      0000A0 4D               [ 1]  148 	tnz	a
      0000A1 27 03            [ 1]  149 	jreq	00108$
                                    150 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 94: status = SET;
      0000A3 A6 01            [ 1]  151 	ld	a, #0x01
                                    152 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 99: status = RESET;
      0000A5 21                     153 	.byte 0x21
      0000A6                        154 00108$:
      0000A6 4F               [ 1]  155 	clr	a
      0000A7                        156 00115$:
                                    157 ;	/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driver/src/stm8s_uart1.uart1_getflagstatus.c: 103: return status;
      0000A7 85               [ 2]  158 	popw	x
      0000A8 81               [ 4]  159 	ret
                                    160 	.area CODE
      0000A9                        161 ___str_0:
      0000A9 2F 68 6F 6D 65 2F 67   162 	.ascii "/home/grytole/dev/git/stm8builder/stm8builder/stdperiph_driv"
             72 79 74 6F 6C 65 2F
             64 65 76 2F 67 69 74
             2F 73 74 6D 38 62 75
             69 6C 64 65 72 2F 73
             74 6D 38 62 75 69 6C
             64 65 72 2F 73 74 64
             70 65 72 69 70 68 5F
             64 72 69 76
      0000E5 65 72 2F 73 72 63 2F   163 	.ascii "er/src/stm8s_uart1.uart1_getflagstatus.c"
             73 74 6D 38 73 5F 75
             61 72 74 31 2E 75 61
             72 74 31 5F 67 65 74
             66 6C 61 67 73 74 61
             74 75 73 2E 63
      00010D 00                     164 	.db 0x00
                                    165 	.area INITIALIZER
                                    166 	.area CABS (ABS)
